** Note : Replace all the square brackets [] with information mentioned in lab **

## TASK 1 - Create a project jumphost instance ##

Watch video

----------------------------------------------------------------------------

## TASK 2 - Create a Kubernetes service cluster ##

gcloud container clusters create nucleus-backend \
--num-nodes 1 \
--network nucleus-vpc \
--region [use_zone_mentioned_in_lab]

gcloud container clusters get-credentials nucleus-backend \
--region [use_zone_mentioned_in_lab]

kubectl create deployment hello-server \
--image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment hello-server \
--type=LoadBalancer \
--port [use_port_mentioned_in_lab]

----------------------------------------------------------------------------

## TASK 3 - Set up an HTTP load balancer ##

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '""\$HOSTNAME""'/' /var/www/html/index.nginx-debian.html
EOF

-----------------------------------

<< subtask - create an instance template >>

gcloud compute instance-templates create web-server-template \
--metadata-from-file startup-script=startup.sh \
--network nucleus-vpc \
--machine-type g1-small \
--region [use_zone_mentioned_in_lab]

-----------------------------------

<< subtask - create a target pool >>

gcloud compute target-pools create nginx-pool

-----------------------------------

<< subtask - create a managed instance group >>

gcloud compute instance-groups managed create web-server-group \
--base-instance-name web-server \
--size 2 \
--template web-server-template \
--region [use_zone_mentioned_in_lab]

-----------------------------------

<< subtask - create a firewall rule to allow traffic (80/tcp) >>

gcloud compute firewall-rules create [use_firewall_rule_name_mentioned_in_lab] \
--allow tcp:80 \
--network nucleus-vpc

-----------------------------------

<< subtask - create a health check >>

gcloud compute http-health-checks create http-basic-check

gcloud compute instance-groups managed \
set-named-ports web-server-group \
--named-ports http:80 \
--region [use_region_mentioned_in_lab]

-----------------------------------

<< subtask - create a backend service and attach the managed instance group >>

gcloud compute backend-services create web-server-backend \
--protocol HTTP \
--http-health-checks http-basic-check \
--global

gcloud compute backend-services add-backend web-server-backend \
--instance-group web-server-group \
--instance-group-region [use_region_mentioned_in_lab] \
--global

-----------------------------------

<< subtask -  create a URL map and target HTTP proxy to route requests to your URL map >>

gcloud compute url-maps create web-server-map \
--default-service web-server-backend

gcloud compute target-http-proxies create http-lb-proxy \
--url-map web-server-map

-----------------------------------

<< subtask - create a forwarding rule >>

gcloud compute forwarding-rules create http-content-rule \
--global \
--target-http-proxy http-lb-proxy \
--ports 80

gcloud compute forwarding-rules create [use_firewall_rule_name_mentioned_in_lab] \
--global \
--target-http-proxy http-lb-proxy \
--ports 80

gcloud compute forwarding-rules list